/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Project.Pages.Agen;

import Project.Connection.Connections;
import Project.Index;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
import java.sql.*;
import java.util.*;

/**
 *
 * @author brsap
 */
public class AgenMenu extends javax.swing.JInternalFrame {

    /**
     * Creates new form Produk
     */
    private Index halamanUtama;
    public boolean dataBaru;
    public AgenMenu() {
        this.halamanUtama = Index.instance; // ✅ sekarang aman
        initComponents();

        getData();
        dataBaru = true;
    }
    private void getData()
    {
        // menampilkan data dari database
        try 
        {
            Connection conn = (Connection) Connections.ConnectionDB();
            java.sql.Statement stm = conn.createStatement();
            java.sql.ResultSet sql = stm.executeQuery("select * from agen");
            // Membuat model tabel untuk menampilkan data
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("No");
            model.addColumn("ID Agen");
            model.addColumn("Nama Agen");
            model.addColumn("Alamat");
            model.addColumn("Created");
            model.addColumn("Updated At");

            // Menambahkan data ke dalam model
            int no = 1;  // Variabel untuk nomor urut

            // Menambahkan data dari ResultSet ke model tabel
            while (sql.next()) {
                model.addRow(new Object[]{
                    no++, // Menambahkan nomor urut
                    sql.getString("idAgen"), // Menambahkan nama produk
                    sql.getString("namaAgen"), // Menambahkan nama produk
                    sql.getString("alamat"), // Menambahkan kategori
                    sql.getString("created_at"), // Menambahkan created_at
                    sql.getString("updated_at")  // Menambahkan updated_at
                });
            }

            // Menampilkan model ke dalam tabel
            agenTabel.setModel(model);
            
            //sembunyikan idPembelian
            agenTabel.getColumnModel().getColumn(1).setMinWidth(0);
            agenTabel.getColumnModel().getColumn(1).setMaxWidth(0);
            agenTabel.getColumnModel().getColumn(1).setWidth(0);
        }
        catch (SQLException | HeadlessException e) 
        {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        textNama = new javax.swing.JTextField();
        btnBersih = new javax.swing.JButton();
        btnTambah = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnKembali = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        agenTabel = new javax.swing.JTable();
        txtCari = new javax.swing.JTextField();
        btnCari = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAlamat = new javax.swing.JTextArea();
        txtIdAgen = new javax.swing.JTextField();
        btnTesting = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1535, 700));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("Daftar Agen");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel2.setText("Nama Agen");

        textNama.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        btnBersih.setBackground(new java.awt.Color(255, 204, 255));
        btnBersih.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnBersih.setText("Bersihkan");
        btnBersih.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBersihActionPerformed(evt);
            }
        });

        btnTambah.setBackground(new java.awt.Color(255, 204, 255));
        btnTambah.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnTambah.setText("Tambahkan/Update");
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        btnHapus.setBackground(new java.awt.Color(255, 204, 255));
        btnHapus.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        btnKembali.setBackground(new java.awt.Color(255, 204, 255));
        btnKembali.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnKembali.setText("Kembali");
        btnKembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKembaliActionPerformed(evt);
            }
        });

        agenTabel.setBackground(new java.awt.Color(255, 204, 255));
        agenTabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        agenTabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                agenTabelMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(agenTabel);

        txtCari.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtCari.setText("cari  agen..");

        btnCari.setBackground(new java.awt.Color(255, 204, 255));
        btnCari.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnCari.setText("Cari");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel3.setText("Alamat");

        txtAlamat.setColumns(20);
        txtAlamat.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtAlamat.setRows(5);
        jScrollPane2.setViewportView(txtAlamat);

        txtIdAgen.setVisible(false);
        txtIdAgen.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        btnTesting.setBackground(new java.awt.Color(255, 204, 255));
        btnTesting.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnTesting.setText("Cek Aja");
        btnTesting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCari))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnBersih, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtIdAgen, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnHapus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnTesting)
                                    .addComponent(btnTambah, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnKembali, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textNama)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 222, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 724, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26)
                .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCari))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(textNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(82, 82, 82))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBersih)
                            .addComponent(btnTambah))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnHapus)
                            .addComponent(btnKembali))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtIdAgen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTesting)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnKembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKembaliActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnKembaliActionPerformed

    private void agenTabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_agenTabelMouseClicked
        // TODO add your handling code here:
        dataBaru = false; // menampilkan data ke textboxt
        try {
            int row =agenTabel.getSelectedRow();
            String tabel_klik=(agenTabel.getModel().getValueAt(row, 1).toString());
            java.sql.Connection conn = (Connection) Connections.ConnectionDB();
            java.sql.Statement stm = conn.createStatement();
            java.sql.ResultSet sql = stm.executeQuery("select * from agen where idAgen='"+tabel_klik+"'");
            if(sql.next()){
                String idAgen = sql.getString("idAgen");
                String nama = sql.getString("namaAgen");
                textNama.setText(nama);
                String alamat = sql.getString("alamat");
                System.out.println("id Agen: "+idAgen);
                txtAlamat.setText(alamat);
                txtIdAgen.setText(idAgen);
            }
        } catch (SQLException e) {}
    }//GEN-LAST:event_agenTabelMouseClicked

    private void btnBersihActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBersihActionPerformed
        // TODO add your handling code here:
        textNama.setText("");
        txtAlamat.setText("");
    }//GEN-LAST:event_btnBersihActionPerformed

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        // TODO add your handling code here:
        if (dataBaru == true) { // prosess simpan atau edit
            try {
                String sql = "insert into agen (namaAgen, alamat) values('"+textNama.getText()+"','"+txtAlamat.getText()+"')";
                java.sql.Connection conn = (Connection) Connections.ConnectionDB();
                java.sql.PreparedStatement pst = conn.prepareStatement(sql);
                pst.execute();
                JOptionPane.showMessageDialog(null, "berhasil disimpan");
            } catch (SQLException | HeadlessException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } else {
            try {
                String sql = "update agen SET namaAgen='"+textNama.getText()+"', alamat='"+txtAlamat.getText()+"' "
                        + "where idAgen = '" + txtIdAgen.getText()+"'";
                java.sql.Connection conn = (Connection) Connections.ConnectionDB();
                java.sql.PreparedStatement pst = conn.prepareStatement(sql);
                pst.execute();
                JOptionPane.showMessageDialog(null, "berhasil disimpan");
            } catch (SQLException | HeadlessException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        getData();
        if (halamanUtama != null) {
            halamanUtama.getPengeluaran();
        }
    }//GEN-LAST:event_btnTambahActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        // TODO add your handling code here:
        Connection conn = null; // Dideklarasi di luar try

        try {
            conn = Connections.ConnectionDB(); // Inisialisasi di dalam try

            String queryRelasiAgen = "SELECT " +
                "pembelian.idPembelian, " +
                "pembelian.idAgen, " +
                "pembelian.totalHarga, " +
                "detail_pembelian.idDetailPembelian, " +
                "detail_pembelian.idProduk, " +
                "detail_pembelian.jumlah, " +
                "produk.stok " +
                "FROM pembelian " +
                "JOIN detail_pembelian ON pembelian.idPembelian = detail_pembelian.idPembelian " +
                "JOIN produk ON detail_pembelian.idProduk = produk.idProduk " +
                "WHERE pembelian.idAgen = '" + txtIdAgen.getText() + "'";

            Statement stm = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet pstShowData = stm.executeQuery(queryRelasiAgen);

            conn.setAutoCommit(false); // Mulai transaksi

            // Map untuk rekap data
            Map<String, Integer> mapJumlahPerProduk = new HashMap<>();
            Map<String, Integer> mapStokPerProduk = new HashMap<>();
            Set<String> idPembelians = new HashSet<>();

            while (pstShowData.next()) {
                String idProduk = pstShowData.getString("idProduk");
                int jumlah = pstShowData.getInt("jumlah");
                int stok = pstShowData.getInt("stok");
                String idPembelian = pstShowData.getString("idPembelian");

                idPembelians.add(idPembelian);
                mapJumlahPerProduk.put(idProduk,
                    mapJumlahPerProduk.getOrDefault(idProduk, 0) + jumlah);
                mapStokPerProduk.putIfAbsent(idProduk, stok);
            }

            String queryUpdateProduk = "UPDATE produk SET stok = ? WHERE idProduk = ?";
            PreparedStatement pstUpdateProduk = conn.prepareStatement(queryUpdateProduk);

            for (String idProdukKey : mapJumlahPerProduk.keySet()) {
                int jumlahTotal = mapJumlahPerProduk.get(idProdukKey);
                int stokAwal = mapStokPerProduk.get(idProdukKey);
                int stokAkhir = Math.max(0, stokAwal - jumlahTotal);

                pstUpdateProduk.setInt(1, stokAkhir);
                pstUpdateProduk.setString(2, idProdukKey);
                pstUpdateProduk.executeUpdate();
            }

            String queryDeletePembelian = "DELETE FROM pembelian WHERE idPembelian = ?";
            PreparedStatement pstDeletePembelian = conn.prepareStatement(queryDeletePembelian);

            for (String idPembelian : idPembelians) {
                pstDeletePembelian.setString(1, idPembelian);
                pstDeletePembelian.executeUpdate();
            }
            String queryDeleteAgen = "DELETE FROM agen WHERE idAgen = ?";
            PreparedStatement pstDeleteAgen = conn.prepareStatement(queryDeleteAgen);
            pstDeleteAgen.setString(1, txtIdAgen.getText());
            pstDeleteAgen.executeUpdate();
            JOptionPane.showMessageDialog(null, "Agen telah berhasil di hapus..");
            conn.commit();

            System.out.println("✅ Transaksi berhasil! Data stok dan pembelian diperbarui.");

        } catch (Exception e) {
            try {
                if (conn != null) conn.rollback(); // Hanya rollback jika conn tidak null
            } catch (SQLException rollbackError) {
                rollbackError.printStackTrace();
            }
            System.err.println("❌ Terjadi kesalahan: " + e.getMessage());

        } finally {
            try {
                if (conn != null) conn.setAutoCommit(true); // Reset autocommit
                if (conn != null) conn.close(); // Tutup koneksi
            } catch (SQLException closeError) {
                closeError.printStackTrace();
            }
        }


        getData();
        if (halamanUtama != null) {
            halamanUtama.getPengeluaran();
       }
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnTestingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestingActionPerformed
        // TODO add your handling code here:
        try{
            String queryRelasiAgen = "SELECT " +
                "pembelian.idPembelian, " +
                "pembelian.idAgen, " +
                "pembelian.totalHarga, " +
                "detail_pembelian.idDetailPembelian, " +
                "detail_pembelian.idProduk, " +
                "detail_pembelian.jumlah, " +
                "produk.stok " +
                "FROM pembelian " +
                "JOIN detail_pembelian ON pembelian.idPembelian = detail_pembelian.idPembelian " +
                "JOIN produk ON detail_pembelian.idProduk = produk.idProduk " +
                "WHERE pembelian.idAgen = '" + txtIdAgen.getText() + "'";

            Connection conn = Connections.ConnectionDB();
            Statement stm = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet pstShowData = stm.executeQuery(queryRelasiAgen);

            // Map untuk rekap data per produk
            Map<String, Integer> mapJumlahPerProduk = new HashMap<>();
            Map<String, Integer> mapStokPerProduk = new HashMap<>();
            Set<String> idPembelians = new HashSet<>();

            // Loop pertama: kumpulkan data
            while (pstShowData.next()) {
                String idProduk = pstShowData.getString("idProduk");
                int jumlah = pstShowData.getInt("jumlah");
                int stok = pstShowData.getInt("stok");
                String idPembelian = pstShowData.getString("idPembelian");

                // Simpan idPembelian agar nanti bisa dihapus (1x)
                idPembelians.add(idPembelian);

                // Rekap jumlah beli per produk
                if (mapJumlahPerProduk.containsKey(idProduk)) {
                    mapJumlahPerProduk.put(idProduk, mapJumlahPerProduk.get(idProduk) + jumlah);
                } else {
                    mapJumlahPerProduk.put(idProduk, jumlah);
                    mapStokPerProduk.put(idProduk, stok); // Simpan stok awal produk ini
                }
            }

            // Proses update stok per produk
            for (String idProdukKey : mapJumlahPerProduk.keySet()) {
                int jumlahTotal = mapJumlahPerProduk.get(idProdukKey);
                int stokAwal = mapStokPerProduk.get(idProdukKey);
                int stokAkhir = (stokAwal >= jumlahTotal) ? stokAwal - jumlahTotal : 0;

                System.out.println("idProduk: " + idProdukKey);
                System.out.println("Total Jumlah Dibeli: " + jumlahTotal);
                System.out.println("Stok Awal: " + stokAwal);
                System.out.println("Stok Akhir: " + stokAkhir);

                // Update stok produk
                String queryUpdateProduk = "UPDATE produk SET stok = ? WHERE idProduk = ?";
                PreparedStatement pstUpdateProduk = conn.prepareStatement(queryUpdateProduk);
                pstUpdateProduk.setInt(1, stokAkhir);
                pstUpdateProduk.setString(2, idProdukKey);
                pstUpdateProduk.executeUpdate();
            }

            // Proses delete pembelian (1x per id)
            for (String idPembelian : idPembelians) {
                String queryDeletePembelian = "DELETE FROM pembelian WHERE idPembelian = ?";
                PreparedStatement pstDeletePembelian = conn.prepareStatement(queryDeletePembelian);
                pstDeletePembelian.setString(1, idPembelian);
                pstDeletePembelian.executeUpdate();
            }

            System.out.println("✅ Semua stok produk berhasil diperbarui dan data pembelian telah dihapus.");


            

            //testing

            
        } catch (SQLException | HeadlessException e) {}
    }//GEN-LAST:event_btnTestingActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable agenTabel;
    private javax.swing.JButton btnBersih;
    private javax.swing.JButton btnCari;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnKembali;
    private javax.swing.JButton btnTambah;
    private javax.swing.JButton btnTesting;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField textNama;
    private javax.swing.JTextArea txtAlamat;
    private javax.swing.JTextField txtCari;
    private javax.swing.JTextField txtIdAgen;
    // End of variables declaration//GEN-END:variables
}
