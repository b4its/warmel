/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Project.Pages.Produk;
import Project.Connection.Connections;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
/**
 *
 * @author brsap
 */
public class KategoriProdukMenu extends javax.swing.JInternalFrame {

    /**
     * Creates new form KategoriProdukMenu
     */
    
    //deklarasi variabel
    public boolean dataBaru;

    public KategoriProdukMenu() {
        initComponents();
        getData();
        dataBaru = true;
    }
    
        private void getData()
    {
        // menampilkan data dari database
        try 
        {
            Connection conn = (Connection) Connections.ConnectionDB();
            java.sql.Statement stm = conn.createStatement();
            java.sql.ResultSet sql = stm.executeQuery("select * from kategori");
            
            // Membuat model tabel untuk menampilkan data
            DefaultTableModel model = new DefaultTableModel();

            // Menambahkan kolom baru untuk 'no'
            model.addColumn("No");
            model.addColumn("Nama Kategori");
            model.addColumn("Created At");
            model.addColumn("Updated At");

            // Menambahkan data ke dalam model
            int no = 1;  // Variabel untuk nomor urut
            while (sql.next()) {
                model.addRow(new Object[] {
                    no++, // Menambahkan nomor urut
                    sql.getString("namaKategori"), // Menambahkan nama kategori
                    sql.getString("created_at"),   // Menambahkan created_at
                    sql.getString("updated_at")    // Menambahkan updated_at
                });
            }

            // Menampilkan model ke dalam tabel
            kategoriProdukTable.setModel(model);
            
        }
        catch (SQLException | HeadlessException e) 
        {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        textNama = new javax.swing.JTextField();
        btnBersihkan = new javax.swing.JButton();
        btnSubmit = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnKembali = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        kategoriProdukTable = new javax.swing.JTable();
        txtCari = new javax.swing.JTextField();
        btnCari = new javax.swing.JButton();
        txtIdKategori = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(1535, 700));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("Daftar Kategori Produk");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel2.setText("Kategori");

        textNama.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        btnBersihkan.setBackground(new java.awt.Color(255, 204, 255));
        btnBersihkan.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnBersihkan.setText("Bersihkan");
        btnBersihkan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBersihkanActionPerformed(evt);
            }
        });

        btnSubmit.setBackground(new java.awt.Color(255, 204, 255));
        btnSubmit.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnSubmit.setText("Tambahkan/Update");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnHapus.setBackground(new java.awt.Color(255, 204, 255));
        btnHapus.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        btnKembali.setBackground(new java.awt.Color(255, 204, 255));
        btnKembali.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnKembali.setText("Kembali");
        btnKembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKembaliActionPerformed(evt);
            }
        });

        kategoriProdukTable.setBackground(new java.awt.Color(255, 204, 255));
        kategoriProdukTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        kategoriProdukTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                kategoriProdukTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(kategoriProdukTable);

        txtCari.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtCari.setText("cari  kategori..");

        btnCari.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnCari.setText("Cari");
        btnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariActionPerformed(evt);
            }
        });

        // Menyembunyikan textField1
        txtIdKategori.setVisible(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(676, 676, 676)
                        .addComponent(txtCari, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCari, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textNama, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnBersihkan, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                    .addComponent(btnHapus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSubmit, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                                    .addComponent(btnKembali, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(txtIdKategori))
                        .addGap(71, 71, 71)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 885, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(81, 81, 81)
                .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCari)
                            .addComponent(txtCari)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                            .addComponent(textNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBersihkan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSubmit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnHapus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnKembali, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(txtIdKategori, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                        .addGap(305, 305, 305))
                    .addComponent(jScrollPane1))
                .addGap(51, 51, 51))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnKembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKembaliActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnKembaliActionPerformed

    private void kategoriProdukTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kategoriProdukTableMouseClicked
        // TODO add your handling code here:
        dataBaru = false; // menampilkan data ke textboxt
        try {
            int row =kategoriProdukTable.getSelectedRow();
            String klikTabel=(kategoriProdukTable.getModel().getValueAt(row, 0).toString());
            Connection conn = (Connection) Connections.ConnectionDB();
            java.sql.Statement stm = conn.createStatement();
            java.sql.ResultSet sql = stm.executeQuery("select * from kategori where idKategori='"+klikTabel+"'");
            if(sql.next()){
                String id = sql.getString("idKategori");
                txtIdKategori.setText(id);
                String nama = sql.getString("namaKategori");
                textNama.setText(nama);
                
            }
        } catch (SQLException e) {}
    }//GEN-LAST:event_kategoriProdukTableMouseClicked

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        if (dataBaru == true) { // prosess simpan atau edit
            try {
                String sql = "INSERT INTO kategori (namaKategori, created_at, updated_at) VALUES ('" + textNama.getText() + "', NOW(), NOW())";

                Connection conn = (Connection) Connections.ConnectionDB();
                java.sql.PreparedStatement pst = conn.prepareStatement(sql);
                pst.execute();
                JOptionPane.showMessageDialog(null, "Kategori telah berhasil disimpan");
            } catch (SQLException | HeadlessException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } else {
            try {
                String sql = "update kategori SET namaKategori='"+textNama.getText()+"', updated_at= now() where idKategori='"+txtIdKategori.getText()+"'";
                Connection conn = (Connection) Connections.ConnectionDB();
                java.sql.PreparedStatement pst = conn.prepareStatement(sql);
                pst.execute();
                JOptionPane.showMessageDialog(null, "Kategori telah berhasil diperbarui");
            } catch (SQLException | HeadlessException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        
        getData();
        
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnBersihkanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBersihkanActionPerformed
        // TODO add your handling code here:
        textNama.setText("");
        
        // tampilkan tabel baru
        getData();
    }//GEN-LAST:event_btnBersihkanActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        // TODO add your handling code here:
                
        try { // hapus data
            String sql ="delete from kategori where idKategori='"+txtIdKategori.getText()+"'";
            Connection conn = (Connection) Connections.ConnectionDB();
            java.sql.PreparedStatement pst = conn.prepareStatement(sql);
            JOptionPane.showMessageDialog(null, "Data akan terhapus..");
            pst.execute();
            
            dataBaru=true;
           
            // kosongkan data
            textNama.setText("");
            txtIdKategori.setText("");
            
        } catch (SQLException | HeadlessException e) {}

        getData();
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariActionPerformed
        // TODO add your handling code here:
        try {
            // Ambil nilai pencarian dari txtCari
            String keyword = txtCari.getText();

            // SQL query untuk mencari data yang sesuai dengan keyword
            String sql = "SELECT * FROM kategori WHERE namaKategori LIKE ?";

            // Buat koneksi ke database
            Connection conn = (Connection) Connections.ConnectionDB();

            // Gunakan PreparedStatement untuk menghindari SQL injection
            java.sql.PreparedStatement pst = conn.prepareStatement(sql);

            // Menggunakan parameter LIKE dengan tanda '%' untuk mencari data yang mengandung keyword
            pst.setString(1, "%" + keyword + "%");

            // Eksekusi query
            java.sql.ResultSet rs = pst.executeQuery();

            // Periksa apakah hasil query mengembalikan data
            if (!rs.isBeforeFirst()) {
                // Jika tidak ada data
                JOptionPane.showMessageDialog(null, "Data tidak ditemukan!");
            } else {
                // Jika ada data, tampilkan ke dalam kategoriProdukTable
                kategoriProdukTable.setModel(DbUtils.resultSetToTableModel(rs));
            }

        } catch (SQLException | HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan: " + e.getMessage());
        }


        // Mengambil data terbaru

    }//GEN-LAST:event_btnCariActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBersihkan;
    private javax.swing.JButton btnCari;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnKembali;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable kategoriProdukTable;
    private javax.swing.JTextField textNama;
    private javax.swing.JTextField txtCari;
    private javax.swing.JTextField txtIdKategori;
    // End of variables declaration//GEN-END:variables
}
